}
## Prompt Submission Part
sid <- partPrompt()
## Get output
output <- getOutput(sid)
if(!manual) {
## Get challenge
ch <- try(getChallenge(email, challenge.url), silent=TRUE)
## Check if url is valid, i.e. challenge received
ch_ok <- !is(ch, "try-error") && exists("ch.key", ch) && !is.na(ch$ch.key)
if(!ch_ok) {
stop("Either the course ID you entered is not valid or your course site ",
"is unreachable at this time. If you'd like to submit manually, you ",
"can run submit(manual=TRUE).")
}
## Attempt submission with challenge
ch.resp <- challengeResponse(password, ch$ch.key)
results <- submitSolution(email, ch.resp, sid, output, ch$state,
submit.url = submit.url)
if(!length(results))
results <- "Incorrect!"
cat("Result: ", results, "\n")
}
else {
outfile <- paste(sid, "output.txt", sep = "-")
writeLines(as.character(output), outfile)
cat(sprintf("Please upload the file '%s' to Coursera\n",
outfile))
}
invisible()
}
})
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a)
a$getMatrix();
a$getMatrix()
cacheSolve(a)
a$getMatrix(a)
a$setMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
a$getMatrix();
getwd()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a$getMatrix()
summary(a);
matrix <- x$get
atrix <- x$get()
matrix <- x$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
# holds the cached value or NULL if nothing is cached
# initially nothing is cached so set it to NULL
cache <- NULL
# store a matrix
setMatrix <- function(newValue) {
x <<- newValue
# since the matrix is assigned a new value, flush the cache
cache <<- NULL
}
# returns the stored matrix
getMatrix <- function() {
x
}
# cache the given argument
cacheInverse <- function(solve) {
cache <<- solve
}
# get the cached value
getInverse <- function() {
cache
}
# return a list. Each named element of the list is a function
list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
}
# The following function calculates the inverse of a "special" matrix created with
# makeCacheMatrix
cacheSolve <- function(y, ...) {
# get the cached value
inverse <- y$getInverse()
# if a cached value exists return it
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
# otherwise get the matrix, caclulate the inverse and store it in
# the cache
data <- y$getMatrix()
inverse <- solve(data)
y$cacheInverse(inverse)
# return the inverse
inverse
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
summary(a);
summary(a);
summary(a);
plusFunctions <- function (){
plustwo <- function(y) {
x <- y + 2
return(x)
}
plusthree <- function(y) {
x <- y + 3
return(x)
}
#the following line stores the two functions:
list(plustwo = plustwo, plusthree = plusthree)
}
plusFunctions(2);
plustwo(2);
plusFunctions <- function (){
plustwo <- function(y) {
x <- y + 2
return(x)
}
plusthree <- function(y) {
x <- y + 3
return(x)
}
#the following line stores the two functions:
list(plustwo = plustwo, plusthree = plusthree)
}
a <- plusFunctions()
a$plustwo(5)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(m)
cacheSolve(m)
x = rbind(c(1, 2), c(2, 1))
x = rbind(c(1, 2), c(2, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(m)
cacheSolve(m)
source('~/programmingassignment2.R')
source('~/PA2.R')
source('C:/Users/sivasangari.vasagar/Desktop/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/sivasangari.vasagar/Desktop/ProgrammingAssignment2/cachematrix.R')
source('~/PA2.R')
source('C:/Users/sivasangari.vasagar/Desktop/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/sivasangari.vasagar/Desktop/ProgrammingAssignment2/cachematrix.R')
source('~/PA2.R')
## Functions to speed up getting inverse of a matrix through
## the use of a caching mechanism
## Takes in a matrix and adds inverse caching functionality to that matrix.
## Inverse is stored in a variable and accessible through getters and setters.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
## save matrix into special object
## when matrix gets set, the cached inverse is cleared and set to NULL
## since it needs to be recalculated for new matrix
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Take in an inversible makeCacheMatrix matrix. Check
## if there is a cached result of matrix inverse. Return cached result if exists,
## otherwise calculate inverse and save result into cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
## cached inverse exists, return instead of recalculating
if(!is.null(inv)){
message("getting cached inverse for given matrix")
return(inv)
}
## find inverse of special matrix and cache it using 'setinverse' function
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
return(inv)
}
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls ()
rm(list=ls())
swirl()
# Clean up workspace
rm(list=ls())
getwd()
Setwd(C:/Users/sivasangari.vasagar/Desktop)
Setwd('C:/Users/sivasangari.vasagar/Desktop')
Setwd('C:/Users/sivasangari.vasagar/Desktop/Coursera3/UCI HAR Dataset');
Setwd ('C:/Users/sivasangari.vasagar/Desktop/Coursera3/UCI HAR Dataset');
setwd('C:/Users/sivasangari.vasagar/Desktop/Coursera3/UCI HAR Dataset')
getwd()
Setwd("C:/Users/sivasangari.vasagar/Documents/Coursera3/UCI HAR Dataset")
Setwd('C:/Users/sivasangari.vasagar/Documents/Coursera3/UCI HAR Dataset')
rm(list=ls())
getwd()
setwd('C:/Users/sivasangari.vasagar/Documents/Cleaning-Data-Assignment/UCI HAR Dataset')
# Read in the data from files
features = read.table('./features.txt',header=FALSE); #imports features.txt
activityType = read.table('./activity_labels.txt',header=FALSE); #imports activity_labels.txt
subjectTrain = read.table('./train/subject_train.txt',header=FALSE); #imports subject_train.txt
xTrain = read.table('./train/x_train.txt',header=FALSE); #imports x_train.txt
yTrain = read.table('./train/y_train.txt',header=FALSE); #imports y_train.txt
# Assigin column names to the data imported above
colnames(activityType) = c('activityId','activityType');
colnames(subjectTrain) = "subjectId";
colnames(xTrain) = features[,2];
colnames(yTrain) = "activityId";
# cCreate the final training set by merging yTrain, subjectTrain, and xTrain
trainingData = cbind(yTrain,subjectTrain,xTrain);
# Read in the test data
subjectTest = read.table('./test/subject_test.txt',header=FALSE); #imports subject_test.txt
xTest = read.table('./test/x_test.txt',header=FALSE); #imports x_test.txt
yTest = read.table('./test/y_test.txt',header=FALSE); #imports y_test.txt
# Assign column names to the test data imported above
colnames(subjectTest) = "subjectId";
colnames(xTest) = features[,2];
colnames(yTest) = "activityId";
# Create the final test set by merging the xTest, yTest and subjectTest data
testData = cbind(yTest,subjectTest,xTest);
# Combine training and test data to create a final data set
finalData = rbind(trainingData,testData);
# Create a vector for the column names from the finalData, which will be used
# to select the desired mean() & stddev() columns
colNames = colnames(finalData);
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
# Create a logicalVector that contains TRUE values for the ID, mean() & stddev() columns and FALSE for others
logicalVector = (grepl("activity..",colNames) | grepl("subject..",colNames) | grepl("-mean..",colNames) & !grepl("-meanFreq..",colNames) & !grepl("mean..-",colNames) | grepl("-std..",colNames) & !grepl("-std()..-",colNames));
# Subset finalData table based on the logicalVector to keep only desired columns
finalData = finalData[logicalVector==TRUE];
# 3. Use descriptive activity names to name the activities in the data set
# Merge the finalData set with the acitivityType table to include descriptive activity names
finalData = merge(finalData,activityType,by='activityId',all.x=TRUE);
# Updating the colNames vector to include the new column names after merge
colNames = colnames(finalData);
# 4. Appropriately label the data set with descriptive activity names.
# Cleaning up the variable names
for (i in 1:length(colNames))
{
colNames[i] = gsub("\\()","",colNames[i])
colNames[i] = gsub("-std$","StdDev",colNames[i])
colNames[i] = gsub("-mean","Mean",colNames[i])
colNames[i] = gsub("^ ","time",colNames[i])
colNames[i] = gsub("^ ","freq",colNames[i])
colNames[i] = gsub("([Gg]ravity)","Gravity",colNames[i])
colNames[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",colNames[i])
colNames[i] = gsub("[Gg]yro","Gyro",colNames[i])
colNames[i] = gsub("AccMag","AccMagnitude",colNames[i])
colNames[i] = gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",colNames[i])
colNames[i] = gsub("JerkMag","JerkMagnitude",colNames[i])
colNames[i] = gsub("GyroMag","GyroMagnitude",colNames[i])
};
# Reassigning the new descriptive column names to the finalData set
colnames(finalData) = colNames;
# 5. Create a second, independent tidy data set with the average of each variable for each activity and each subject.
# Create a new table, finalDataNoActivityType without the activityType column
finalDataNoActivityType = finalData[,names(finalData) != 'activityType'];
# Summarizing the finalDataNoActivityType table to include just the mean of each variable for each activity and each subject
tidyData = aggregate(finalDataNoActivityType[,names(finalDataNoActivityType) != c('activityId','subjectId')],by=list(activityId=finalDataNoActivityType$activityId,subjectId = finalDataNoActivityType$subjectId),mean);
# Merging the tidyData with activityType to include descriptive acitvity names
tidyData = merge(tidyData,activityType,by='activityId',all.x=TRUE);
# Export the tidyData set
write.table(tidyData, './tidyData.txt',row.names=TRUE,sep='\t');
getwd()
